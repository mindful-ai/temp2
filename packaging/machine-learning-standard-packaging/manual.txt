To package a machine learning model (e.g., a linear regression model), 
you’ll need to save the trained model, create a Python module for loading 
and using the model, and package everything for distribution. 

Here’s a step-by-step guide with an industry-standard directory structure 
for machine learning projects, followed by installation steps.

-------------------------------------------------------------------------------------
Example Project Structure
-------------------------------------------------------------------------------------

Industry-Standard Directory Structure
The structure below is commonly used for machine learning projects. 
It includes folders for data, source code, notebooks, model artifacts, 
tests, and documentation.

my_ml_project/
├── data/                   # Store datasets (train, validation, test)
│   ├── raw/
│   ├── processed/
├── models/                 # Saved models
│   └── linear_regression_model.pkl
├── notebooks/              # Jupyter notebooks for experiments
│   └── EDA.ipynb
├── src/                    # Source code
│   ├── __init__.py
│   ├── data_loader.py      # Code for loading and preprocessing data
│   ├── train.py            # Code for training the model
│   └── predict.py          # Code for predictions and model usage
├── tests/                  # Unit and integration tests
│   ├── test_data_loader.py
│   ├── test_train.py
│   └── test_predict.py
├── README.md               # Project description and usage instructions
├── setup.py                # Setup script for packaging
└── requirements.txt        # Dependencies


-------------------------------------------------------------------------------------
Train and Save the Model
-------------------------------------------------------------------------------------

Let’s assume we’ve trained a linear regression model and want to save it. 
We’ll use scikit-learn to create and save the model.

# src/train.py
import pandas as pd
from sklearn.linear_model import LinearRegression
import joblib

# Load dataset
data = pd.read_csv("data/processed/train.csv")
X = data[["feature1", "feature2"]]
y = data["target"]

# Train model
model = LinearRegression()
model.fit(X, y)

# Save model
joblib.dump(model, "models/linear_regression_model.pkl")



-------------------------------------------------------------------------------------
Create a Script for Model Prediction
-------------------------------------------------------------------------------------

# src/predict.py
import joblib

def load_model(model_path="models/linear_regression_model.pkl"):
    """Load the model from a file."""
    return joblib.load(model_path)

def predict(features, model):
    """Make predictions using the loaded model."""
    return model.predict([features])

# Example usage
if __name__ == "__main__":
    model = load_model()
    features = [5.1, 3.5]  # Replace with actual input data
    prediction = predict(features, model)
    print("Prediction:", prediction)


-------------------------------------------------------------------------------------
Create setup.py for Packaging
-------------------------------------------------------------------------------------

# setup.py
from setuptools import setup, find_packages

setup(
    name="my_ml_project",
    version="0.1",
    packages=find_packages(),
    install_requires=[
        "pandas",
        "scikit-learn",
        "joblib"
    ],
    entry_points={
        "console_scripts": [
            "train_model=src.train:main",
            "predict_model=src.predict:main",
        ]
    },
)



-------------------------------------------------------------------------------------
Add a requirements.txt
-------------------------------------------------------------------------------------

This file lists all dependencies required to run the project.

# requirements.txt
pandas
scikit-learn
joblib



-------------------------------------------------------------------------------------
Build the Package
-------------------------------------------------------------------------------------

Install the necessary tools for building the package:
>>> pip install setuptools wheel

Build the package by running the following command from the project’s root directory:
>>> python setup.py sdist bdist_wheel

This will create a dist/ folder with files like my_ml_project-0.1-py3-none-any.whl.

-------------------------------------------------------------------------------------
Install the Package
-------------------------------------------------------------------------------------

To install the package, use:
>>> pip install dist/my_ml_project-0.1-py3-none-any.whl

-------------------------------------------------------------------------------------
Usage Example
-------------------------------------------------------------------------------------

After installing, you can use the model and make predictions with the packaged module.

Train the model:
>>> train_model

Run predictions:
>>> predict_model


